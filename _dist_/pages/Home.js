import './Home.css.proxy.js';
/* src/pages/Home.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	create_in_transition,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import { fade } from "../../web_modules/svelte/transition.js";

function create_fragment(ctx) {
	let div;
	let h1;
	let t1;
	let h3;
	let t3;
	let button;
	let t5;
	let p0;
	let t6;
	let t7;
	let t8;
	let p1;
	let t9;
	let t10;
	let div_intro;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			h1 = element("h1");
			h1.textContent = "i am svelt";
			t1 = space();
			h3 = element("h3");
			h3.textContent = "fear me react stans";
			t3 = space();
			button = element("button");
			button.textContent = "buton";
			t5 = space();
			p0 = element("p");
			t6 = text("buton pres: ");
			t7 = text(/*clicks*/ ctx[1]);
			t8 = space();
			p1 = element("p");
			t9 = text("elapse time: ");
			t10 = text(/*timer*/ ctx[0]);
			attr(button, "class", "svelte-1j4rfx5");
			attr(div, "class", "svelte-1j4rfx5");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h1);
			append(div, t1);
			append(div, h3);
			append(div, t3);
			append(div, button);
			append(div, t5);
			append(div, p0);
			append(p0, t6);
			append(p0, t7);
			append(div, t8);
			append(div, p1);
			append(p1, t9);
			append(p1, t10);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*clicks*/ 2) set_data(t7, /*clicks*/ ctx[1]);
			if (dirty & /*timer*/ 1) set_data(t10, /*timer*/ ctx[0]);
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fade, { duration: 100 });
					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let timer = 0; // @hmr:keep
	let clicks = 0;
	setInterval(() => $$invalidate(0, timer++, timer), 1000);
	const click_handler = () => $$invalidate(1, clicks++, clicks);
	return [timer, clicks, click_handler];
}

class Home extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Home;